*******************MODULE 1****************************************************
git --version
git config --global user.name "username"
git config --global user.email "your email id"
git config --list
git config --help


git init #initilize the repo
git status
git add -A #add the edited files to staging area
git commit -m "Some comment here" #commiting staged files in the repo
.gitignore file creation

Woring directory and staging area and commited files
git reset <filename>
git reset 

as soon as we commit the changes then we will get commit hash number which is unique each ans every commit in the repo

git clone <URL> <location to place>
git remote add <repo name> <URL to link remote repo>
git remote -v
git branch -a

git diff
git status
git add -A
git commit -m "comment before commiting to the repo"

git pull origin master
git push origin master


git branch newBranch
git checkout newBranch
git push -u origin newBranch
git branch -a

git checkout master
git pull origin master
git branch --merged
git merge newBranch
git push origin master

git branch --merged
git branch -d newBranch
git branch -a
git push origin --delete newBranch

********************************MODULE 2***************************************


to modify message in commit without again commiting is to use amend as below
git commit --amend "here give your new commit message"
touch .gitingore 
git status
git add -A
git status
git commit --amend 


here i have commited my changes to master branch instead of a some other branch
What I can do in such case
Using cherry we can commit the last commit to desired branch
git checkout newBranch 
git cherry-pick <hash of the commit that has been committed in the other branch>

But this not delete the commit on the previous branch, we have to delete it explicitly again

git checkout master
git reset --soft < hash > #Soft resets bac to staging area

git reset < hash > #Brings the changes down to wroking directory
git reset --hard <hash> #Delete all the changes cleanly till hash, deletes evenfrom working directory

git clean -df #To delete all the untracked files and folders
git reflog
git checkout <hash of the resetted commit>
git branch backup
git checkout backup
git log
git checkout master 
Now the lost commit is backed up in the backup branch
git revert <hash of the commit> #It wont touch the previous git history but removes the previous commit and creates a new one
git diff <hash1> <hash2>


********************************MODULE 3***************************************
##STASH
git branch newBranch
git checkout newBranch
git diff
##Do some changes here in this branch
git stash save "I got some work on master, worked something till now here"
git status
git stash list
git stash apply stash@{0}
git stash list
git checkout -- .
git stash pop #Grabs very first stash and applies on the repo and it removes stash
git stash list #ideally removes the top stash on the stack

#Handling with multiple stashes
git stash list 
git stash save "yo yo I'm adding something"
#add some changes againa and stash it
git stash save "yo yo this is second stash adding now"
git stash list
git stash drop stash@{0}
#Then it drops top stack stash

git stash clear #clears all the stashes

#Using git stash you can also do like below
git checkout master
#Add something here
git stash save "Save here with some comment"
git checkout newBranch
git stash pop
git diff
git status
git add .
git commit -m "some message"

point to be noted: Stash can be accessible across the branchees

***********************************MODULE 4************************************
#GIT merge and diff tools

***********************************Module 6************************************

git add -A #Adds all the diectoies and files to staging area, irrespective of the location from where you are ruunning the command

git add -A someDir/ #Add all the files and folder inside the someDir alone, ignore the files in parent directory "git add someDir/" also do same.

git add --no-all someDir/ #will add the files staging only the modified and new not any deleted files

git add -u #Adds all the files which are deleted/modified not any untracked files(that mean new files)

git add -u someDir/ #Works same as above but confines to a specified directory only

git add . #But this is differs from "git add -A", this particular command only adds the working directory files in the current working directory not any other files in parent directories.

git add * #This adds all the files and directories to staging area but not hidden and deleted files in the currently but all the hidden and deleted files in it's children directories
 



