*******************MODULE 1****************************************************
git --version
git config --global user.name "username"
git config --global user.email "your email id"
git config --list
git config --help


git init #initilize the repo
git status
git add -A #add the edited files to staging area
git commit -m "Some comment here" #commiting staged files in the repo
.gitignore file creation

Woring directory and staging area and commited files
git reset <filename>
git reset 

as soon as we commit the changes then we will get commit hash number which is unique each ans every commit in the repo

git clone <URL> <location to place>
git remote add <repo name> <URL to link remote repo>
git remote -v
git branch -a

git diff
git status
git add -A
git commit -m "comment before commiting to the repo"

git pull origin master
git push origin master


git branch newBranch
git checkout newBranch
git push -u origin newBranch
git branch -a

git checkout master
git pull origin master
git branch --merged
git merge newBranch
git push origin master

git branch --merged
git branch -d newBranch
git branch -a
git push origin --delete newBranch

********************************MODULE 2***************************************


to modify message in commit without again commiting is to use amend as below
git commit --amend "here give your new commit message"
touch .gitingore 
git status
git add -A
git status
git commit --amend 


here i have commited my changes to master branch instead of a some other branch
What I can do in such case
Using cherry we can commit the last commit to desired branch
git checkout newBranch 
git cherry-pick <hash of the commit that has been committed in the other branch>

But this not delete the commit on the previous branch, we have to delete it explicitly again

git checkout master
git reset --soft < hash > #Soft resets bac to staging area


